<?xml version="1.0"?>
<robot name="mr_CCMDX1" xmlns:xacro="http://ros.org/wiki/xacro">
<origin xyz="0 0 1"/>

  <xacro:property name="width" value="0.2" />
  <xacro:property name="wheelradius" value="0.05" />
  <xacro:property name="pi" value="3.1415" />
  <xacro:property name="bodylen" value="0.2" />
  <xacro:property name="wheelwidth" value="0.08" /> <!-- added as the length of the cylinder, so the width of the tire, was still hardcoded-->
  <xacro:property name="leglen" value="0.2" />
  <xacro:property name="baselen" value="0.32" />


  <material name="fucsia">
    <color rgba="255 0 255 1"/>
  </material>
  <material name="black">
    <color rgba="0 0 0 50"/>
  </material>
  <material name="navy">
    <color rgba="0 0 128 50"/>
  </material>
  <material name="white">
    <color rgba="255 255 255 1"/>
  </material>


  <xacro:macro name="mdxcc1_inertial" params="mass"> <!-- mass here becomes the parameter to which I will assign values as I use it in the robot -->
    <inertial>
      <mass value="${mass}" />
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0" />
    </inertial>
  </xacro:macro>

 <link name="base_link">
    <visual>
        <geometry>
            <cylinder radius="${width}" length="${bodylen}"/>
        </geometry>
        <material name="fucsia"/>
    </visual>
    <collision>
        <geometry>
            <cylinder radius="${width}" length="${bodylen}"/>
        </geometry>
    </collision>
    <xacro:mdxcc1_inertial mass="10"/>
  </link>
    <gazebo reference="base_link">
      <material>Gazebo/Purple</material>
    </gazebo>

  <link name="robot_head_link">
    <visual>
      <geometry>
        <sphere radius="${width}"/>
      </geometry>
      <origin xyz="0 0 ${bodylen/3}"/>
      <material name="black"/>
    </visual>
    <collision>
      <geometry>
        <sphere radius="${width}"/>
      </geometry>
      <origin xyz="0 0 ${bodylen/3}"/>
    </collision>
    <xacro:mdxcc1_inertial mass="5"/>
  </link>
    <gazebo reference="robot_head_link">
      <material>Gazebo/Black</material>
    </gazebo>

  <joint name="head_swivel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="robot_head_link"/>
    <axis xyz="0 0 1"/>
    <origin xyz="0 0 ${bodylen/3}"/>
    <limit effort="50" velocity="0.5"/>
  </joint>

  <!-- This block connects the head_swivel joint to an actuator (motor), which informs both simulation and visualization of the robot -->
  <transmission name="head_swivel_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="head_swivel_joint">
      <!--hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface-->
      <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
    </joint>
    <actuator name="$head_swivel_motor">
      <mechanicalReduction>1</mechanicalReduction>
      <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
    </actuator>
  </transmission>


<!-- Here I need to add the stabiliser macro -->

 <xacro:macro name="stabiliser" params="suffix_s reflect_s"> <!-- this macro will accept two parameters: suffix and reflect-->
   <link name="${suffix_s}_stabiliser_link">
    <visual>
     <geometry>
      <sphere radius="${width/3}"/>
     </geometry>
     <origin xyz="0 0 0" rpy="0 0 0"/>
     <material name="black"/>
    </visual>
    <collision>
     <geometry>
      <sphere radius="${width/3}"/>
     </geometry>
     <origin xyz="0 0 0" rpy="0 0 0"/>
    </collision>
    <xacro:mdxcc1_inertial mass="4"/>
   </link>

   <joint name="${suffix_s}_stabiliser_joint" type="continuous">
    <parent link="base_link"/>
    <child link="${suffix_s}_stabiliser_link"/>
    <axis xyz="0 0 1"/>
    <origin xyz="${reflect_s*(0.07+(width/2))} 0 -${0.03+width/2}"/>
    <limit effort="50" velocity="0.5"/>
  </joint>

   <gazebo reference="${suffix_s}_stabiliser_link">
    <mu1 value="200.0"/>
    <mu2 value="100.0"/>
    <kp value="10000000.0" />
    <kd value="1.0" />
    <material>Gazebo/Black</material>
   </gazebo>

    <transmission name="${suffix_s}_stabiliser_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="${suffix_s}_stabiliser_joint">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </joint>
      <actuator name="${suffix_s}_stabiliser_motor">
        <mechanicalReduction>1</mechanicalReduction>
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </actuator>
    </transmission>
 </xacro:macro>


<!-- Here I need to add the wheel macro -->

  <xacro:macro name="wheel" params="prefix suffix reflect_w"> <!-- this macro will accept three parameters: prefix, suffix and reflect-->
    <link name="${prefix}_${suffix}_wheel_link">
      <visual>
        <geometry>
          <cylinder radius="${wheelradius}" length= "${wheelwidth}"/>
        </geometry>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <material name="black"/>
      </visual>
      <collision>
        <geometry>
          <cylinder radius="${wheelradius}" length= "${wheelwidth}"/>
        </geometry>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
      </collision>
      <xacro:mdxcc1_inertial mass="4"/>
    </link>

    <joint name="${prefix}_${suffix}_wheel_joint" type="continuous">
      <axis xyz="0 1 0" />
      <parent link="${prefix}_box_base_link"/>
      <child link="${prefix}_${suffix}_wheel_link"/>
      <origin xyz="${baselen*reflect_w/3} 0 -${wheelradius+.05}" rpy="0 0 0"/>
    </joint>

    <gazebo reference="${prefix}_${suffix}_wheel_link">
      <mu1 value="200.0"/>
      <mu2 value="100.0"/>
      <kp value="10000000.0" />
      <kd value="1.0" />
      <material>Gazebo/Black</material>
    </gazebo>

    <transmission name="${prefix}_${suffix}_wheel_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="${prefix}_${suffix}_wheel_joint">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </joint>
      <actuator name="${prefix}_${suffix}_wheel_motor">
        <mechanicalReduction>1</mechanicalReduction>
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </actuator>
    </transmission>
  </xacro:macro>

<!-- Here I need to add the leg macro -->

  <xacro:macro name="leg" params="prefix reflect">
    <link name="baseto_${prefix}_leg_link">
      <visual>
        <geometry>
          <box size="${leglen} 0.1 0.1"/>
        </geometry>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <material name="black"/>
      </visual>
      <collision>
        <geometry>
          <box size="${leglen} 0.1 0.1"/>
        </geometry>
        <origin xyz="0 0 0" rpy="0 0 0"/>
      </collision>
      <xacro:mdxcc1_inertial mass="10"/>
    </link>

    <gazebo reference="baseto_${prefix}_leg_link">
      <material>Gazebo/Black</material>
    </gazebo>
    <joint name="baseto_${prefix}_leg_joint" type="fixed">
      <parent link="base_link"/>
      <child link="baseto_${prefix}_leg_link"/>
      <origin xyz="0 ${reflect*(width+0.05)} ${leglen/2}" rpy="0 ${pi/2} 0"/>
    </joint>
    <link name="${prefix}_round_base_link">
      <visual>
        <geometry>
         <cylinder length="${wheelwidth+0.02}" radius="${baselen/2}"/>
        </geometry>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <material name="navy"/>
      </visual>
      <collision>
        <geometry>
         <cylinder length="${wheelwidth+0.02}" radius="${baselen/2}"/>
        </geometry>
        <origin rpy="0 0 0" xyz="0 0 0"/>
      </collision>
      <xacro:mdxcc1_inertial mass="10"/>
    </link>
    <joint name="${prefix}_round_base_joint" type="fixed">
      <parent link="baseto_${prefix}_leg_link"/>
      <child link="${prefix}_round_base_link"/>
      <origin xyz="0.12 ${reflect*(width/10)} 0" rpy="${reflect*pi/2} ${pi/2} 0"/>
    </joint>
    <gazebo reference="${prefix}_round_base_link">
      <material>Gazebo/Blue</material>
    </gazebo>
    <link name="${prefix}_box_base_link">
      <visual>
        <geometry>
         <box size="${baselen} 0.1 0.14"/>
        </geometry>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <material name="navy"/>
      </visual>
      <collision>
        <geometry>
         <box size="${baselen} 0.1 0.14"/>
        </geometry>
        <origin rpy="0 0 0" xyz="0 0 0"/>
      </collision>
      <xacro:mdxcc1_inertial mass="10"/>
    </link>
    <joint name="${prefix}_box_base_joint" type="fixed">
      <parent link="${prefix}_round_base_link"/>
      <child link="${prefix}_box_base_link"/>
      <origin xyz="0 ${reflect*(width-0.15)} 0" rpy="${reflect*pi/2} ${pi} 0"/>
    </joint>
    <gazebo reference="${prefix}_box_base_link">
      <material>Gazebo/Blue</material>
    </gazebo>
   <xacro:wheel prefix="${prefix}" suffix="front" reflect_w="1"/>
   <xacro:wheel prefix="${prefix}" suffix="back" reflect_w="-1"/>
  </xacro:macro>
  <xacro:leg prefix="right" reflect="-1" />
  <xacro:leg prefix="left" reflect="1" />

  <xacro:stabiliser suffix_s="front" reflect_s="1" />
  <xacro:stabiliser suffix_s="back" reflect_s="-1" />

  <joint name="camera_box_joint" type="fixed">
   <axis xyz="0 1 0" />
    <parent link="robot_head_link"/>
    <child link="camera_link"/>
    <origin xyz="0.17 0 0.1414"/>
  </joint>

  <link name="camera_link">
   <visual>
    <geometry>
     <box size="0.08 0.08 0.08"/>
    </geometry>
    <material name="navy"/>
    <origin xyz="0 0 0"/>
    </visual>
     <collision>
      <geometry>
       <box size="0.08 0.08 0.08"/>
      </geometry>
      <origin xyz="0 0 0"/>
     </collision>
     <inertial>
      <mass value="1"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
     </inertial>
  </link>

    <gazebo reference="camera_link">
      <material>Gazebo/YellowGlow</material>
    </gazebo>

<!-- camera -->
  <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">
      <update_rate>30.0</update_rate>
      <camera name="head_camera">
        <horizontal_fov>1.5</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>ccmdx1/camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Hokuyo Laser -->
 <joint name="head_laser_sensor_joint" type="fixed">
    <axis xyz="0 0 0" />
    <origin xyz="0 0 0.36"/>
    <parent link="base_link"/>
    <child link="hokuyo_link"/>
  </joint>

  <link name="hokuyo_link">
   <origin xyz="0 0 0" rpy="0 0 0"/>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
       <box size="0.05 0.05 0.05"/>
      </geometry>
    </collision>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <material name="white"/>
      <geometry>
        <mesh filename="package://mobile_robot_CCMDX1/meshes/hokuyo.dae"/>
      </geometry>
    </visual>
   <xacro:mdxcc1_inertial mass="1e-5"/>
  </link>

    <gazebo reference="hokuyo_link">
      <material>Gazebo/YellowGlow</material>
    </gazebo>

<!-- hokuyo -->
  <gazebo reference="hokuyo_link">
    <sensor type="gpu_ray" name="head_hokuyo_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_gpu_laser.so">
        <topicName>/ccmdx1/laser/scan</topicName>
        <frameName>hokuyo_link</frameName>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/</robotNamespace>
    </plugin>
  </gazebo>

</robot>
